// ********RoostGPT********
/*
Test generated by RoostGPT for test testGradleReport using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=addTwoNumbers_cca9997f57
ROOST_METHOD_SIG_HASH=addTwoNumbers_da7966707b

Scenario 1: Test Addition of Two Positive Numbers

Details:  
  TestName: testAdditionOfTwoPositiveNumbers
  Description: This test will verify the addition of two positive numbers. 
  Execution:
    Arrange: Initialize two positive numbers say 10 and 20.
    Act: Invoke the addTwoNumbers method with these two numbers.
    Assert: Assert that the returned value is 30.
  Validation: 
    The test aims to verify the correct addition of two positive numbers. The expected result is 30 because 10 + 20 equals 30. This test is significant as it validates the basic functionality of the method.

Scenario 2: Test Addition of Two Negative Numbers

Details:  
  TestName: testAdditionOfTwoNegativeNumbers
  Description: This test will verify the addition of two negative numbers. 
  Execution:
    Arrange: Initialize two negative numbers say -10 and -20.
    Act: Invoke the addTwoNumbers method with these two numbers.
    Assert: Assert that the returned value is -30.
  Validation: 
    The test aims to verify the correct addition of two negative numbers. The expected result is -30 because -10 + -20 equals -30. This test is significant as it validates that the method can handle negative numbers.

Scenario 3: Test Addition of a Positive Number and a Negative Number

Details:  
  TestName: testAdditionOfPositiveAndNegativeNumbers
  Description: This test will verify the addition of a positive number and a negative number. 
  Execution:
    Arrange: Initialize one positive number and one negative number say 10 and -5.
    Act: Invoke the addTwoNumbers method with these two numbers.
    Assert: Assert that the returned value is 5.
  Validation: 
    The test aims to verify the correct addition of a positive number and a negative number. The expected result is 5 because 10 + -5 equals 5. This test is significant as it validates that the method can handle mixed sign inputs.

Scenario 4: Test Addition of Two Zeroes

Details:  
  TestName: testAdditionOfTwoZeroes
  Description: This test will verify the addition of two zeroes. 
  Execution:
    Arrange: Initialize two zeroes.
    Act: Invoke the addTwoNumbers method with these two numbers.
    Assert: Assert that the returned value is 0.
  Validation: 
    The test aims to verify the correct addition of two zeroes. The expected result is 0 because 0 + 0 equals 0. This test is significant as it validates that the method can handle zero inputs.
*/

// ********RoostGPT********
package com.tomgregory;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class GradleTutorialAddTwoNumbersTest {
    @Test
    public void testAdditionOfTwoPositiveNumbers() {
        // Arrange
        int a = 10;
        int b = 20;
        // Act
        int result = addTwoNumbers(a, b);
        // Assert
        assertEquals(30, result);
    }
    @Test
    public void testAdditionOfTwoNegativeNumbers() {
        // Arrange
        int a = -10;
        int b = -20;
        // Act
        int result = addTwoNumbers(a, b);
        // Assert
        assertEquals(-30, result);
    }
    
    @Test
    public void testAdditionOfPositiveAndNegativeNumbers() {
        // Arrange
        int a = 10;
        int b = -5;
        // Act
        int result = addTwoNumbers(a, b);
        // Assert
        assertEquals(5, result);
    }
    
    @Test
    public void testAdditionOfTwoZeroes() {
        // Arrange
        int a = 0;
        int b = 0;
        // Act
        int result = addTwoNumbers(a, b);
        // Assert
        assertEquals(0, result);
    }
    public int addTwoNumbers(int a, int b) {
        return a + b;
    }
}