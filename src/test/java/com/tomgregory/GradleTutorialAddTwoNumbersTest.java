// ********RoostGPT********
/*
Test generated by RoostGPT for test testGradleReport using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=addTwoNumbers_cca9997f57
ROOST_METHOD_SIG_HASH=addTwoNumbers_da7966707b

Scenario 1: Test Addition of Two Positive Numbers

Details:  
  TestName: testAdditionOfTwoPositiveNumbers
  Description: This test will verify that the method correctly adds two positive integers. 
Execution:
  Arrange: No setup required as the method accepts two integers directly.
  Act: Invoke the addTwoNumbers method with two positive integers. 
  Assert: Compare the method's return value with the expected sum of the two positive integers.
Validation: 
  This assertion verifies that the method correctly adds two positive integers. This test is essential to ensure that the basic arithmetic operation is performed correctly by the method.

Scenario 2: Test Addition of Two Negative Numbers

Details:  
  TestName: testAdditionOfTwoNegativeNumbers
  Description: This test will verify that the method correctly adds two negative integers. 
Execution:
  Arrange: No setup required as the method takes two integers directly.
  Act: Invoke the addTwoNumbers method with two negative integers. 
  Assert: Compare the method's return value with the expected sum of the two negative integers.
Validation: 
  This assertion verifies that the method correctly adds two negative integers. This test is important to ensure that the basic arithmetic operation is performed correctly by the method.

Scenario 3: Test Addition of Positive and Negative Number

Details:  
  TestName: testAdditionOfPositiveAndNegativeNumber
  Description: This test will verify that the method correctly adds a positive integer and a negative integer. 
Execution:
  Arrange: No setup required as the method accepts two integers directly.
  Act: Invoke the addTwoNumbers method with a positive integer and a negative integer. 
  Assert: Compare the method's return value with the expected sum of the positive integer and the negative integer.
Validation: 
  This assertion verifies that the method correctly adds a positive integer and a negative integer. This test is important to ensure that the basic arithmetic operation is performed correctly by the method.

Scenario 4: Test Addition of Two Zeroes

Details:  
  TestName: testAdditionOfTwoZeroes
  Description: This test will verify that the method correctly adds two zeroes. 
Execution:
  Arrange: No setup required as the method takes two integers directly.
  Act: Invoke the addTwoNumbers method with two zeroes. 
  Assert: Compare the method's return value with the expected sum of the two zeroes.
Validation: 
  This assertion verifies that the method correctly adds two zeroes. This test is important to ensure that the basic arithmetic operation is performed correctly by the method.
*/

// ********RoostGPT********
package com.tomgregory;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class GradleTutorialAddTwoNumbersTest {
    @Test
    public void testAdditionOfTwoPositiveNumbers() {
        int a = 5;
        int b = 7;
        int expected = 12;
        assertEquals(expected, addTwoNumbers(a, b));
    }
    @Test
    public void testAdditionOfTwoNegativeNumbers() {
        int a = -5;
        int b = -7;
        int expected = -12;
        assertEquals(expected, addTwoNumbers(a, b));
    }
    @Test
    public void testAdditionOfPositiveAndNegativeNumber() {
        int a = 5;
        int b = -7;
        int expected = -2;
        assertEquals(expected, addTwoNumbers(a, b));
    }
    @Test
    public void testAdditionOfTwoZeroes() {
        int a = 0;
        int b = 0;
        int expected = 0;
        assertEquals(expected, addTwoNumbers(a, b));
    }
    public int addTwoNumbers(int a, int b) {
        return a + b;
    }
}